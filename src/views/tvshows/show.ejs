<%- include('../partials/header') %>
<link rel="stylesheet" href="/css/tvshows.css">

<div class="container">
    <div class="tvshow-details">
        <div class="tvshow-poster">
            <img src="<%= tvshow.poster %>" alt="<%= tvshow.title %>">
        </div>
        <div class="tvshow-info">
            <h1><%= tvshow.title %></h1>

            <% if (user) { %>
                <button id="favoriteBtn" class="favorite-btn" onclick="toggleFavorite()">
                    <i class="fas <%= isFavorite ? 'fa-heart' : 'fa-heart-o' %>"></i>
                    <span><%= isFavorite ? 'Remove from Favorites' : 'Add to Favorites' %></span>
                </button>
            <% } %>
            
            <div class="rating-display">
                <% const avgRating = reviews.reduce((acc, rev) => acc + rev.rating, 0) / reviews.length || 0; %>
                <div class="rating-stars">
                    <% for(let i = 1; i <= 5; i++) { %>
                        <i class="fas fa-star" style="color: <%= i <= avgRating ? '#FFD700' : '#333333' %>"></i>
                    <% } %>
                    <span class="rating-number" style="color: #FFD700"><%= avgRating.toFixed(1) %></span>
                </div>
            </div>

            <div class="tvshow-meta">
                <div class="meta-item">
                    <span class="meta-label">Genre:</span>
                    <span class="meta-value">
                        <% JSON.parse(tvshow.genres).forEach((genre, index) => { %>
                            <span class="genre-tag"><%= genre %></span>
                            <%= index < JSON.parse(tvshow.genres).length - 1 ? ',' : '' %>
                        <% }); %>
                    </span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Language:</span>
                    <span class="meta-value"><%= tvshow.language %></span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Release Date:</span>
                    <span class="meta-value"><%= new Date(tvshow.release_date).toLocaleDateString() %></span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Runtime:</span>
                    <span class="meta-value"><%= tvshow.runtime %> per episode</span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Seasons:</span>
                    <span class="meta-value"><%= tvshow.seasons %></span>
                </div>
                <div class="meta-item">
                    <span class="meta-label">Episodes:</span>
                    <span class="meta-value"><%= tvshow.total_episodes %></span>
                </div>
            </div>

            <p class="tvshow-description"><%= tvshow.description %></p>
            
            <!-- Credits Section -->
            <div class="tvshow-credits">
                <% if (credits) { %>
                    <!-- Technicians -->
                    <% const technicians = credits.filter(c => c.role === 'technician'); %>
                    <% if (technicians.length > 0) { %>
                        <div class="credits-group">
                            <h3>Technicians</h3>
                            <div class="credits-list">
                                <% technicians.forEach(tech => { %>
                                    <span class="credit-name"><%= tech.name %></span>
                                <% }); %>
                            </div>
                        </div>
                    <% } %>

                    <!-- Poster Designers -->
                    <% const designers = credits.filter(c => c.role === 'poster_designer'); %>
                    <% if (designers.length > 0) { %>
                        <div class="credits-group">
                            <h3>Poster Designers</h3>
                            <div class="credits-list">
                                <% designers.forEach(designer => { %>
                                    <span class="credit-name"><%= designer.name %></span>
                                <% }); %>
                            </div>
                        </div>
                    <% } %>

                    <!-- Translators -->
                    <% const translators = credits.filter(c => c.role === 'translator'); %>
                    <% if (translators.length > 0) { %>
                        <div class="credits-group">
                            <h3>Translators</h3>
                            <div class="credits-list">
                                <% translators.forEach(translator => { %>
                                    <span class="credit-name"><%= translator.name %></span>
                                <% }); %>
                            </div>
                        </div>
                    <% } %>
                <% } %>
            </div>
            
            <div class="tvshow-episodes">
                <h3>Episodes</h3>
                <div class="episode-selector">
                    <select id="season-select" class="filter-select">
                        <option value="">Select Season</option>
                        <% for(let i = 1; i <= tvshow.seasons; i++) { %>
                            <option value="<%= i %>">Season <%= i %></option>
                        <% } %>
                    </select>
                    <select id="episode-select" class="filter-select" disabled>
                        <option value="">Select Episode</option>
                    </select>
                    <select id="server-select" class="filter-select" disabled>
                        <option value="">Select Server</option>
                    </select>
                </div>
                <div id="episode-player" class="embed-container" style="display: none;"></div>
            </div>

            <div class="tvshow-reviews">
                <h3>Reviews</h3>
                <% if (user && !hasReviewed) { %>
                    <form action="/tvshows/<%= tvshow.id %>/review" method="POST" class="review-form">
                        <div class="form-group">
                            <label for="rating">Rating</label>
                            <select name="rating" id="rating" required>
                                <option value="5">5 Stars</option>
                                <option value="4">4 Stars</option>
                                <option value="3">3 Stars</option>
                                <option value="2">2 Stars</option>
                                <option value="1">1 Star</option>
                            </select>
                        </div>
                        <div class="form-group">
                            <label for="comment">Comment</label>
                            <textarea name="comment" id="comment" required></textarea>
                        </div>
                        <button type="submit" class="btn">Submit Review</button>
                    </form>
                <% } %>

                <div class="reviews-list">
                    <% reviews.forEach(review => { %>
                        <div class="review" id="review-<%= review.id %>">
                            <div class="review-header">
                                <span class="review-author"><%= review.username %></span>
                                <span class="review-rating">
                                    <% for(let i = 1; i <= 5; i++) { %>
                                        <i class="fas fa-star" style="color: <%= i <= review.rating ? '#FFD700' : '#333333' %>"></i>
                                    <% } %>
                                </span>
                                <% if (user && user.is_admin) { %>
                                    <button class="delete-review-btn" onclick="deleteReview(<%= review.id %>)">
                                        <i class="fas fa-trash"></i>
                                    </button>
                                <% } %>
                            </div>
                            <p class="review-comment"><%= review.comment %></p>
                            <small class="review-date">
                                <%= new Date(review.created_at).toLocaleDateString() %>
                            </small>
                        </div>
                    <% }); %>
                </div>
            </div>
        </div>
    </div>
</div>

<style>
.tvshow-meta {
    margin: 1.5rem 0;
    padding: 1rem;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
}

.meta-item {
    margin-bottom: 0.75rem;
    display: flex;
    align-items: center;
}

.meta-label {
    color: #FFD700;
    font-weight: 600;
    min-width: 120px;
}

.meta-value {
    color: #FFFFFF;
}

.genre-tag {
    display: inline-block;
    padding: 0.25rem 0.5rem;
    background-color: rgba(255, 215, 0, 0.1);
    border-radius: 4px;
    margin-right: 0.5rem;
    color: #FFD700;
}

.rating-display {
    margin: 1rem 0;
}

.rating-stars {
    display: flex;
    align-items: center;
    gap: 0.5rem;
}

.rating-number {
    font-weight: 600;
    margin-left: 0.5rem;
}

.favorite-btn {
    display: inline-flex;
    align-items: center;
    gap: 0.5rem;
    padding: 0.5rem 1rem;
    background-color: rgba(255, 215, 0, 0.1);
    border: 1px solid var(--primary);
    border-radius: 4px;
    color: var(--primary);
    cursor: pointer;
    transition: all 0.3s ease;
    margin: 1rem 0;
}

.favorite-btn:hover {
    background-color: var(--primary);
    color: var(--secondary);
}

.favorite-btn i {
    font-size: 1.1rem;
}

.review-header {
    position: relative;
}

.delete-review-btn {
    position: absolute;
    right: 0;
    top: 330%;
    transform: translateY(-50%);
    background: none;
    border: none;
    color: #dc2626;
    cursor: pointer;
    padding: 0.5rem;
    opacity: 0.7;
    transition: opacity 0.3s ease;
}

.delete-review-btn:hover {
    opacity: 1;
}

/* Add styles for credits */
.tvshow-credits {
    margin: 2rem 0;
    padding: 1.5rem;
    background-color: rgba(255, 255, 255, 0.05);
    border-radius: 8px;
}

.credits-group {
    margin-bottom: 1.5rem;
}

.credits-group h3 {
    color: var(--primary);
    margin-bottom: 1rem;
    font-size: 1.2rem;
    border-bottom: 2px solid var(--primary);
    padding-bottom: 0.5rem;
}

.credits-list {
    display: flex;
    flex-wrap: wrap;
    gap: 0.5rem;
    max-height: 100px;
    overflow-y: auto;
    padding-right: 1rem;
    scrollbar-width: thin;
    scrollbar-color: var(--primary) rgba(255, 255, 255, 0.1);
}

.credits-list::-webkit-scrollbar {
    width: 8px;
}

.credits-list::-webkit-scrollbar-track {
    background: rgba(255, 255, 255, 0.1);
    border-radius: 4px;
}

.credits-list::-webkit-scrollbar-thumb {
    background-color: var(--primary);
    border-radius: 4px;
}

.credit-name {
    background-color: rgba(255, 215, 0, 0.1);
    color: var(--primary);
    padding: 0.25rem 0.75rem;
    border-radius: 4px;
    font-size: 0.9rem;
}
</style>

<script>
const seasonSelect = document.getElementById('season-select');
const episodeSelect = document.getElementById('episode-select');
const serverSelect = document.getElementById('server-select');
const episodePlayer = document.getElementById('episode-player');

const episodes = <%- JSON.stringify(episodes) %>;

seasonSelect.addEventListener('change', function() {
    const season = this.value;
    episodeSelect.innerHTML = '<option value="">Select Episode</option>';
    serverSelect.innerHTML = '<option value="">Select Server</option>';
    episodePlayer.style.display = 'none';
    
    if (season) {
        const seasonEpisodes = episodes.filter(ep => ep.season == season);
        seasonEpisodes.forEach(ep => {
            const option = document.createElement('option');
            option.value = ep.id;
            option.textContent = `Episode ${ep.episode}`;
            episodeSelect.appendChild(option);
        });
        episodeSelect.disabled = false;
    } else {
        episodeSelect.disabled = true;
        serverSelect.disabled = true;
    }
});

episodeSelect.addEventListener('change', async function() {
    const episodeId = this.value;
    serverSelect.innerHTML = '<option value="">Select Server</option>';
    episodePlayer.style.display = 'none';
    
    if (episodeId) {
        const response = await fetch(`/api/episodes/${episodeId}/servers`);
        const servers = await response.json();
        servers.forEach(server => {
            const option = document.createElement('option');
            option.value = server.embed_url;
            option.textContent = server.server_name;
            serverSelect.appendChild(option);
        });
        serverSelect.disabled = false;
    } else {
        serverSelect.disabled = true;
    }
});

serverSelect.addEventListener('change', function() {
    const embedUrl = this.value;
    if (embedUrl) {
        episodePlayer.innerHTML = `<iframe src="${embedUrl}" allowfullscreen></iframe>`;
        episodePlayer.style.display = 'block';
    } else {
        episodePlayer.style.display = 'none';
    }
});

async function toggleFavorite() {
    const button = document.getElementById('favoriteBtn');
    const icon = button.querySelector('i');
    const text = button.querySelector('span');
    const isFavorite = icon.classList.contains('fa-heart');
    
    try {
        const response = await fetch(`/user/favorites/${isFavorite ? 'remove' : 'add'}`, {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify({
                contentId: <%= tvshow.id %>,
                contentType: 'tvshow'
            })
        });
        
        if (response.ok) {
            icon.classList.toggle('fa-heart');
            icon.classList.toggle('fa-heart-o');
            text.textContent = isFavorite ? 'Add to Favorites' : 'Remove from Favorites';
        }
    } catch (err) {
        console.error('Failed to toggle favorite:', err);
    }
}

async function deleteReview(reviewId) {
    if (!confirm('Are you sure you want to delete this review?')) {
        return;
    }
    
    try {
        const response = await fetch(`/tvshows/<%= tvshow.id %>/review/${reviewId}/delete`, {
            method: 'POST'
        });
        
        if (response.ok) {
            const reviewElement = document.getElementById(`review-${reviewId}`);
            reviewElement.remove();
        } else {
            alert('Failed to delete review');
        }
    } catch (err) {
        console.error('Error deleting review:', err);
        alert('Failed to delete review');
    }
}
</script>

<%- include('../partials/footer') %>