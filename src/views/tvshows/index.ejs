<%- include('../partials/header') %>

<div class="container">
    <h1>TV Shows</h1>
    
    <div class="page-search">
        <input type="text" id="page-search-input" class="page-search-input" placeholder="Search TV shows...">
        <div class="filter-controls">
            <select id="sort-select" class="filter-select">
                <option value="latest">Latest</option>
                <option value="oldest">Oldest</option>
                <option value="rating">Highest Rated</option>
            </select>
            <select id="seasons-select" class="filter-select">
                <option value="all">All Seasons</option>
                <option value="1">1 Season</option>
                <option value="2">2 Seasons</option>
                <option value="3+">3+ Seasons</option>
            </select>
            <select id="genre-select" class="filter-select">
                <option value="all">All Genres</option>
                <% ['Action', 'Comedy', 'Horror', 'Drama', 'Thriller', 'Romance', 
                    'Sci-Fi', 'Fantasy', 'Adventure', 'Crime', 'Mystery', 'Documentary',
                    'Animation', 'Family', 'Historical', 'Musical', 'Superhero', 
                    'Reality TV', 'Sports', 'Art House'].forEach(genre => { %>
                    <option value="<%= genre %>"><%= genre %></option>
                <% }); %>
            </select>
        </div>
    </div>

    <div class="content-grid">
        <% tvshows.forEach(tvshow => { %>
            <div class="content-card" 
                 data-rating="<%= tvshow.avgRating || 0 %>" 
                 data-date="<%= tvshow.created_at %>"
                 data-seasons="<%= tvshow.seasons %>"
                 data-genres="<%= tvshow.genres %>"
                 data-title="<%= tvshow.title.toLowerCase() %>">
                <a href="/tvshows/<%= tvshow.id %>">
                    <img src="<%= tvshow.poster %>" alt="<%= tvshow.title %>">
                    <% if (tvshow.avgRating > 0) { %>
                      <div class="rating-badge">
                        <i class="fas fa-star"></i>
                        <%= tvshow.avgRating.toFixed(1) %>
                      </div>
                    <% } %>
                    <div class="content-title"><%= tvshow.title %></div>
                </a>
            </div>
        <% }); %>
    </div>
</div>

<style>
.filter-select {
    background-color: var(--secondary);
    color: var(--primary);
    border: 1px solid var(--primary);
    padding: 0.75rem;
    border-radius: 4px;
    cursor: pointer;
    min-width: 150px;
}

.filter-select option {
    background-color: var(--secondary);
    color: var(--primary);
    padding: 0.5rem;
}

.filter-select:focus {
    outline: none;
    border-color: var(--primary);
    box-shadow: 0 0 0 2px rgba(255, 215, 0, 0.2);
}
</style>

<script>
const searchInput = document.getElementById('page-search-input');
const sortSelect = document.getElementById('sort-select');
const seasonsSelect = document.getElementById('seasons-select');
const genreSelect = document.getElementById('genre-select');
const contentGrid = document.querySelector('.content-grid');

function filterAndSortContent() {
    const searchTerm = searchInput.value.toLowerCase();
    const sortBy = sortSelect.value;
    const seasonsFilter = seasonsSelect.value;
    const genreFilter = genreSelect.value;
    
    const tvshows = Array.from(contentGrid.children);
    
    tvshows.forEach(tvshow => {
        const title = tvshow.dataset.title;
        const seasons = parseInt(tvshow.dataset.seasons);
        const genres = JSON.parse(tvshow.dataset.genres || '[]');
        
        let showBySeasons = true;
        if (seasonsFilter !== 'all') {
            if (seasonsFilter === '3+') {
                showBySeasons = seasons >= 3;
            } else {
                showBySeasons = seasons === parseInt(seasonsFilter);
            }
        }
        
        const matchesGenre = genreFilter === 'all' || genres.includes(genreFilter);
        const matchesSearch = title.includes(searchTerm);
        
        const shouldShow = matchesSearch && showBySeasons && matchesGenre;
        tvshow.style.display = shouldShow ? '' : 'none';
    });
    
    const visibleShows = tvshows.filter(show => show.style.display !== 'none');
    
    visibleShows.sort((a, b) => {
        if (sortBy === 'latest') {
            return new Date(b.dataset.date) - new Date(a.dataset.date);
        } else if (sortBy === 'oldest') {
            return new Date(a.dataset.date) - new Date(b.dataset.date);
        } else if (sortBy === 'rating') {
            return parseFloat(b.dataset.rating) - parseFloat(a.dataset.rating);
        }
    });
    
    visibleShows.forEach(show => contentGrid.appendChild(show));
}

searchInput.addEventListener('input', filterAndSortContent);
sortSelect.addEventListener('change', filterAndSortContent);
seasonsSelect.addEventListener('change', filterAndSortContent);
genreSelect.addEventListener('change', filterAndSortContent);
</script>

<%- include('../partials/footer') %>